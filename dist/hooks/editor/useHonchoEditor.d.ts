import { SelectChangeEvent } from "@mui/material";
import { Gallery } from '../../hooks/editor/type';
declare global {
    interface Window {
        Module: any;
    }
}
export interface Controller {
    onGetImage(firebaseUid: string, imageID: string): Promise<Gallery>;
    getImageList(firebaseUid: string, eventId: string, page: number): Promise<ResponseGallery>;
    syncConfig(firebaseUid: string): Promise<void>;
    handleBack(firebaseUid: string, imageID: string): void;
    getPresets(firebaseUid: string): Promise<Preset[]>;
    createPreset(firebaseUid: string, name: string, settings: AdjustmentState): Promise<Preset>;
    deletePreset(firebaseUid: string, presetId: string): Promise<void>;
}
export interface ResponseGallery {
    gallery: Gallery[];
    limit: number;
    current_page: number;
    prev_page: number;
    next_page: number;
    sum_of_image?: number;
}
export type AdjustmentState = {
    tempScore: number;
    tintScore: number;
    vibranceScore: number;
    saturationScore: number;
    exposureScore: number;
    highlightsScore: number;
    shadowsScore: number;
    whitesScore: number;
    blacksScore: number;
    contrastScore: number;
    clarityScore: number;
    sharpnessScore: number;
};
export type Preset = {
    id: string;
    name: string;
};
export type ImageItem = {
    id: string;
    url: string;
    file: File;
};
export declare function useHonchoEditor(controller: Controller, initImageId: string, firebaseUid: string, eventId: string): {
    canvasRef: import("react").MutableRefObject<HTMLCanvasElement | null>;
    canvasContainerRef: import("react").MutableRefObject<HTMLDivElement | null>;
    fileInputRef: import("react").MutableRefObject<HTMLInputElement | null>;
    displayedToken: string | null;
    handleBackCallback: () => void;
    handlePrev: (firebaseUid: string) => Promise<void>;
    handleNext: (firebaseUid: string) => Promise<void>;
    panelRef: import("react").MutableRefObject<HTMLDivElement | null>;
    contentRef: import("react").MutableRefObject<HTMLDivElement | null>;
    panelHeight: number;
    handleDragStart: (e: React.MouseEvent | React.TouchEvent) => void;
    handleContentHeightChange: (height: number) => void;
    editorStatus: string;
    isEditorReady: boolean;
    isImageLoaded: boolean;
    isPasteAvailable: boolean;
    isOnline: boolean;
    isConnectionSlow: boolean;
    showCopyAlert: boolean;
    isCopyDialogOpen: boolean;
    isPublished: boolean;
    activePanel: string;
    activeSubPanel: string;
    headerMenuAnchorEl: HTMLElement | null;
    anchorMenuZoom: HTMLElement | null;
    colorAdjustmentExpandedPanels: string[];
    presetExpandedPanels: string[];
    isCreatingWatermark: boolean;
    isPresetModalOpen: boolean;
    isPresetModalOpenMobile: boolean;
    presetName: string;
    isPresetCreated: boolean;
    selectedMobilePreset: string | null;
    selectedDesktopPreset: string | null;
    selectedBulkPreset: string;
    presetMenuAnchorEl: HTMLElement | null;
    activePresetMenuId: string | null;
    currentAspectRatio: string;
    currentSquareRatio: string;
    currentWideRatio: string;
    angelScore: number;
    widthSizePX: number;
    heightSizePX: number;
    isBulkEditing: boolean;
    selectedImages: string;
    colorAdjustments: boolean;
    lightAdjustments: boolean;
    detailsAdjustments: boolean;
    handleShowOriginal: () => void;
    handleShowEdited: () => void;
    handleWheelZoom: (event: React.WheelEvent) => void;
    handleZoomAction: (action: string) => void;
    zoomLevelText: string;
    presets: Preset[];
    handleScriptReady: () => Promise<void>;
    handleFileChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
    handleAlertClose: () => void;
    loadImageFromId: (firebaseUid: string, imageId: string) => Promise<void>;
    loadImageFromUrl: (url: string) => Promise<void>;
    handleRevert: () => void;
    handleUndo: () => void;
    handleRedo: () => void;
    handleOpenCopyDialog: () => void;
    handleCloseCopyDialog: () => void;
    copyColorChecks: {
        temperature: boolean;
        tint: boolean;
        vibrance: boolean;
        saturation: boolean;
    };
    setCopyColorChecks: import("react").Dispatch<import("react").SetStateAction<{
        temperature: boolean;
        tint: boolean;
        vibrance: boolean;
        saturation: boolean;
    }>>;
    copyLightChecks: {
        exposure: boolean;
        contrast: boolean;
        highlights: boolean;
        shadows: boolean;
        whites: boolean;
        blacks: boolean;
    };
    setCopyLightChecks: import("react").Dispatch<import("react").SetStateAction<{
        exposure: boolean;
        contrast: boolean;
        highlights: boolean;
        shadows: boolean;
        whites: boolean;
        blacks: boolean;
    }>>;
    copyDetailsChecks: {
        clarity: boolean;
        sharpness: boolean;
    };
    setCopyDetailsChecks: import("react").Dispatch<import("react").SetStateAction<{
        clarity: boolean;
        sharpness: boolean;
    }>>;
    copyDialogExpanded: {
        color: boolean;
        light: boolean;
        details: boolean;
    };
    handleCopyParentChange: (event: React.ChangeEvent<HTMLInputElement>, setter: React.Dispatch<React.SetStateAction<any>>) => void;
    handleCopyChildChange: (event: React.ChangeEvent<HTMLInputElement>, setter: React.Dispatch<React.SetStateAction<any>>) => void;
    handleToggleCopyDialogExpand: (section: "color" | "light" | "details") => void;
    handleConfirmCopy: () => void;
    handleCopyEdit: () => void;
    handlePasteEdit: () => void;
    setActivePanel: import("react").Dispatch<import("react").SetStateAction<string>>;
    setActiveSubPanel: import("react").Dispatch<import("react").SetStateAction<string>>;
    setHeaderMenuAnchorEl: import("react").Dispatch<import("react").SetStateAction<HTMLElement | null>>;
    setAnchorMenuZoom: import("react").Dispatch<import("react").SetStateAction<HTMLElement | null>>;
    handleHeaderMenuClick: (event: React.MouseEvent<HTMLElement>) => void;
    handleHeaderMenuClose: () => void;
    setColorAdjustments: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    setLightAdjustments: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    setDetailsAdjustments: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    handleColorAccordionChange: (panel: string) => (_: React.SyntheticEvent, isExpanded: boolean) => void;
    handlePresetAccordionChange: (panel: string) => (_: React.SyntheticEvent, isExpanded: boolean) => void;
    handleSelectMobilePreset: (presetId: string) => void;
    handleSelectDesktopPreset: (presetId: string) => void;
    handlePresetMenuClick: (event: React.MouseEvent<HTMLElement>, presetId: string) => void;
    handlePresetMenuClose: () => void;
    handleCreatePreset: () => Promise<void>;
    handleRemovePreset: () => void;
    handleDeletePreset: () => Promise<void>;
    handleOpenPresetModal: () => void;
    handleClosePresetModal: () => void;
    handleOpenPresetModalMobile: () => void;
    handleClosePresetModalMobile: () => void;
    handleCreatePresetMobile: () => void;
    setPresetName: import("react").Dispatch<import("react").SetStateAction<string>>;
    handleNameChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
    isRenameModalOpen: boolean;
    presetToRename: Preset | null;
    newPresetName: string;
    setNewPresetName: import("react").Dispatch<import("react").SetStateAction<string>>;
    handleOpenRenameModal: () => void;
    handleCloseRenameModal: () => void;
    handleOpenWatermarkView: () => void;
    handleSaveWatermark: () => void;
    handleCancelWatermark: () => void;
    toggleBulkEditing: () => void;
    handleSelectBulkPreset: (event: SelectChangeEvent<string>) => void;
    tempScore: number;
    setTempScore: (value: number) => void;
    tintScore: number;
    setTintScore: (value: number) => void;
    vibranceScore: number;
    setVibranceScore: (value: number) => void;
    saturationScore: number;
    setSaturationScore: (value: number) => void;
    exposureScore: number;
    setExposureScore: (value: number) => void;
    highlightsScore: number;
    setHighlightsScore: (value: number) => void;
    shadowsScore: number;
    setShadowsScore: (value: number) => void;
    whitesScore: number;
    setWhitesScore: (value: number) => void;
    blacksScore: number;
    setBlacksScore: (value: number) => void;
    contrastScore: number;
    setContrastScore: (value: number) => void;
    clarityScore: number;
    setClarityScore: (value: number) => void;
    sharpnessScore: number;
    setSharpnessScore: (value: number) => void;
    imageList: ImageItem[];
    adjustmentsMap: Map<string, AdjustmentState>;
    selectedImageIds: Set<string>;
    handleToggleImageSelection: (imageId: string) => void;
    handleBulkTempDecreaseMax: () => void;
    handleBulkTempDecrease: () => void;
    handleBulkTempIncrease: () => void;
    handleBulkTempIncreaseMax: () => void;
    handleBulkTintDecreaseMax: () => void;
    handleBulkTintDecrease: () => void;
    handleBulkTintIncrease: () => void;
    handleBulkTintIncreaseMax: () => void;
    handleBulkVibranceDecreaseMax: () => void;
    handleBulkVibranceDecrease: () => void;
    handleBulkVibranceIncrease: () => void;
    handleBulkVibranceIncreaseMax: () => void;
    handleBulkSaturationDecreaseMax: () => void;
    handleBulkSaturationDecrease: () => void;
    handleBulkSaturationIncrease: () => void;
    handleBulkSaturationIncreaseMax: () => void;
    handleBulkExposureDecreaseMax: () => void;
    handleBulkExposureDecrease: () => void;
    handleBulkExposureIncrease: () => void;
    handleBulkExposureIncreaseMax: () => void;
    handleBulkContrastDecreaseMax: () => void;
    handleBulkContrastDecrease: () => void;
    handleBulkContrastIncrease: () => void;
    handleBulkContrastIncreaseMax: () => void;
    handleBulkHighlightsDecreaseMax: () => void;
    handleBulkHighlightsDecrease: () => void;
    handleBulkHighlightsIncrease: () => void;
    handleBulkHighlightsIncreaseMax: () => void;
    handleBulkShadowsDecreaseMax: () => void;
    handleBulkShadowsDecrease: () => void;
    handleBulkShadowsIncrease: () => void;
    handleBulkShadowsIncreaseMax: () => void;
    handleBulkWhitesDecreaseMax: () => void;
    handleBulkWhitesDecrease: () => void;
    handleBulkWhitesIncrease: () => void;
    handleBulkWhitesIncreaseMax: () => void;
    handleBulkBlacksDecreaseMax: () => void;
    handleBulkBlacksDecrease: () => void;
    handleBulkBlacksIncrease: () => void;
    handleBulkBlacksIncreaseMax: () => void;
    handleBulkClarityDecreaseMax: () => void;
    handleBulkClarityDecrease: () => void;
    handleBulkClarityIncrease: () => void;
    handleBulkClarityIncreaseMax: () => void;
    handleBulkSharpnessDecreaseMax: () => void;
    handleBulkSharpnessDecrease: () => void;
    handleBulkSharpnessIncrease: () => void;
    handleBulkSharpnessIncreaseMax: () => void;
};
