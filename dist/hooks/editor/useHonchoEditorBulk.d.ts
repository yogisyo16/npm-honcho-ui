import { SelectChangeEvent } from "@mui/material";
import { AdjustmentState, Controller, Preset } from './useHonchoEditor';
import { Gallery, ResponseGalleryPaging } from '../../hooks/editor/type';
import { AdjustmentValues } from "../../lib/editor/honcho-editor";
export interface PhotoData {
    key: string;
    src: string;
    original: string;
    width: number;
    height: number;
    alt: string;
    isSelected: boolean;
    adjustments?: Partial<AdjustmentValues>;
}
export interface ControllerBulk {
    onGetImage(firebaseUid: string, imageID: string): Promise<Gallery>;
    getImageList(firebaseUid: string, eventID: string, page: number): Promise<ResponseGalleryPaging>;
    syncConfig(firebaseUid: string): Promise<void>;
    handleBack(firebaseUid: string, lastImageID: string): void;
    getPresets(firebaseUid: string): Promise<Preset[]>;
    createPreset(firebaseUid: string, name: string, settings: AdjustmentState): Promise<Preset>;
    deletePreset(firebaseUid: string, presetId: string): Promise<void>;
}
export declare function useHonchoEditorBulk(controller: Controller, eventID: string, firebaseUid: string): {
    imageData: PhotoData[];
    isLoading: boolean;
    error: string | null;
    selectedIds: string[];
    hasMore: boolean;
    handleBackCallbackBulk: () => void;
    selectedBulkPreset: string;
    handleToggleImageSelection: (imageId: string) => void;
    handleSelectBulkPreset: (event: SelectChangeEvent<string>) => void;
    handleBulkTempDecreaseMax: () => void;
    handleBulkTempDecrease: () => void;
    handleBulkTempIncrease: () => void;
    handleBulkTempIncreaseMax: () => void;
    handleBulkTintDecreaseMax: () => void;
    handleBulkTintDecrease: () => void;
    handleBulkTintIncrease: () => void;
    handleBulkTintIncreaseMax: () => void;
    handleBulkVibranceDecreaseMax: () => void;
    handleBulkVibranceDecrease: () => void;
    handleBulkVibranceIncrease: () => void;
    handleBulkVibranceIncreaseMax: () => void;
    handleBulkSaturationDecreaseMax: () => void;
    handleBulkSaturationDecrease: () => void;
    handleBulkSaturationIncrease: () => void;
    handleBulkSaturationIncreaseMax: () => void;
    handleBulkExposureDecreaseMax: () => void;
    handleBulkExposureDecrease: () => void;
    handleBulkExposureIncrease: () => void;
    handleBulkExposureIncreaseMax: () => void;
    handleBulkContrastDecreaseMax: () => void;
    handleBulkContrastDecrease: () => void;
    handleBulkContrastIncrease: () => void;
    handleBulkContrastIncreaseMax: () => void;
    handleBulkHighlightsDecreaseMax: () => void;
    handleBulkHighlightsDecrease: () => void;
    handleBulkHighlightsIncrease: () => void;
    handleBulkHighlightsIncreaseMax: () => void;
    handleBulkShadowsDecreaseMax: () => void;
    handleBulkShadowsDecrease: () => void;
    handleBulkShadowsIncrease: () => void;
    handleBulkShadowsIncreaseMax: () => void;
    handleBulkWhitesDecreaseMax: () => void;
    handleBulkWhitesDecrease: () => void;
    handleBulkWhitesIncrease: () => void;
    handleBulkWhitesIncreaseMax: () => void;
    handleBulkBlacksDecreaseMax: () => void;
    handleBulkBlacksDecrease: () => void;
    handleBulkBlacksIncrease: () => void;
    handleBulkBlacksIncreaseMax: () => void;
    handleBulkClarityDecreaseMax: () => void;
    handleBulkClarityDecrease: () => void;
    handleBulkClarityIncrease: () => void;
    handleBulkClarityIncreaseMax: () => void;
    handleBulkSharpnessDecreaseMax: () => void;
    handleBulkSharpnessDecrease: () => void;
    handleBulkSharpnessIncrease: () => void;
    handleBulkSharpnessIncreaseMax: () => void;
};
