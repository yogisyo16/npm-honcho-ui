import { SelectChangeEvent } from "@mui/material";
import { AdjustmentState, ImageItem, Controller } from './useHonchoEditor';
export declare function useHonchoEditorBulk(controller: Controller, initImageId: string, firebaseUid: string): {
    isBulkEditing: boolean;
    selectedImages: string;
    imageList: ImageItem[];
    selectedImageIds: Set<string>;
    adjustmentsMap: Map<string, AdjustmentState>;
    selectedBulkPreset: string;
    handleFileChangeBulk: (event: React.ChangeEvent<HTMLInputElement>) => void;
    handleToggleImageSelection: (imageId: string) => void;
    toggleBulkEditing: () => void;
    handleSelectBulkPreset: (event: SelectChangeEvent<string>) => void;
    setTempScore: (value: number) => void;
    setTintScore: (value: number) => void;
    setVibranceScore: (value: number) => void;
    setSaturationScore: (value: number) => void;
    setExposureScore: (value: number) => void;
    setHighlightsScore: (value: number) => void;
    setShadowsScore: (value: number) => void;
    setWhitesScore: (value: number) => void;
    setBlacksScore: (value: number) => void;
    setContrastScore: (value: number) => void;
    setClarityScore: (value: number) => void;
    setSharpnessScore: (value: number) => void;
    handleBulkTempDecreaseMax: () => void;
    handleBulkTempDecrease: () => void;
    handleBulkTempIncrease: () => void;
    handleBulkTempIncreaseMax: () => void;
    handleBulkTintDecreaseMax: () => void;
    handleBulkTintDecrease: () => void;
    handleBulkTintIncrease: () => void;
    handleBulkTintIncreaseMax: () => void;
    handleBulkVibranceDecreaseMax: () => void;
    handleBulkVibranceDecrease: () => void;
    handleBulkVibranceIncrease: () => void;
    handleBulkVibranceIncreaseMax: () => void;
    handleBulkSaturationDecreaseMax: () => void;
    handleBulkSaturationDecrease: () => void;
    handleBulkSaturationIncrease: () => void;
    handleBulkSaturationIncreaseMax: () => void;
    handleBulkExposureDecreaseMax: () => void;
    handleBulkExposureDecrease: () => void;
    handleBulkExposureIncrease: () => void;
    handleBulkExposureIncreaseMax: () => void;
    handleBulkContrastDecreaseMax: () => void;
    handleBulkContrastDecrease: () => void;
    handleBulkContrastIncrease: () => void;
    handleBulkContrastIncreaseMax: () => void;
    handleBulkHighlightsDecreaseMax: () => void;
    handleBulkHighlightsDecrease: () => void;
    handleBulkHighlightsIncrease: () => void;
    handleBulkHighlightsIncreaseMax: () => void;
    handleBulkShadowsDecreaseMax: () => void;
    handleBulkShadowsDecrease: () => void;
    handleBulkShadowsIncrease: () => void;
    handleBulkShadowsIncreaseMax: () => void;
    handleBulkWhitesDecreaseMax: () => void;
    handleBulkWhitesDecrease: () => void;
    handleBulkWhitesIncrease: () => void;
    handleBulkWhitesIncreaseMax: () => void;
    handleBulkBlacksDecreaseMax: () => void;
    handleBulkBlacksDecrease: () => void;
    handleBulkBlacksIncrease: () => void;
    handleBulkBlacksIncreaseMax: () => void;
    handleBulkClarityDecreaseMax: () => void;
    handleBulkClarityDecrease: () => void;
    handleBulkClarityIncrease: () => void;
    handleBulkClarityIncreaseMax: () => void;
    handleBulkSharpnessDecreaseMax: () => void;
    handleBulkSharpnessDecrease: () => void;
    handleBulkSharpnessIncrease: () => void;
    handleBulkSharpnessIncreaseMax: () => void;
};
